// Generated by CoffeeScript 1.7.1

/*
determines if an object is an array
 */

(function() {
  var isArray;

  isArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  module.exports = {

    /*
    creates a `resource_uri` property for the given model
    
    @param model: an instance of a `mongoose.model`
    @param path: the path supplied in the resource's `options`
    
    @returns: the updated `model` param
     */
    self_uri: function(model, path) {
      return model._doc.resource_uri = "" + path + "/" + model._id;
    },

    /*
    converts `_id` strings of referenced models to resource paths
    
    @param model: an instance of a `mongoose.model`
    @param refs: the refs supplied in the resource's `options`
    
    @returns: the updated `model` param
     */
    ref2resource: function(model, refs) {
      var i, key, resource, val, _results;
      _results = [];
      for (key in refs) {
        resource = refs[key];
        if (isArray(model[key])) {
          _results.push((function() {
            var _ref, _results1;
            _ref = model[key];
            _results1 = [];
            for (i in _ref) {
              val = _ref[i];
              if (model._doc[key][i] != null) {
                _results1.push(model._doc[key][i] = "" + resource.many_path + "/" + val);
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          if (model._doc[key] != null) {
            _results.push(model._doc[key] = "" + resource.many_path + "/" + model[key]);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    }
  };

}).call(this);
