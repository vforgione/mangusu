// Generated by CoffeeScript 1.7.1
(function() {
  var ref2resource, respond, self_uri, _;

  _ = require('lodash');

  respond = require('../responses');

  ref2resource = require('./dry').ref2resource;

  self_uri = require('./dry').self_uri;

  module.exports = function(Model, options) {
    return function(req, res) {
      var key, limit, query, skip, sort, value, where;
      limit = req.query.limit || options.limit;
      skip = req.query.skip || void 0;
      sort = req.query.sort || void 0;
      try {
        limit = parseInt(limit);
      } catch (_error) {
        return respond.bad_request(res, "could not parse integer from provided `limit` " + limit);
      }
      if (skip) {
        try {
          skip = parseInt(skip);
        } catch (_error) {
          return respond.bad_request(res, "could not parse integer from provided `skip` " + skip);
        }
      }
      query = _.merge(req.query, req.params);
      where = _.transform(query, function(conditions, value, key) {
        if (key !== 'limit' && key !== 'skip' && key !== 'sort') {
          return conditions[key] = value;
        }
      });
      for (key in where) {
        value = where[key];
        where[key] = JSON.parse(value);
      }
      return Model.find(where).sort(sort).skip(skip).limit(limit).exec(function(err, models) {
        var count, model, output, _i, _len;
        if (err) {
          return respond.bad_request(res, err.message);
        } else {
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            if (options.refs != null) {
              ref2resource(model, options.refs);
            }
            self_uri(model, options.path);
          }
          output = {};
          output.meta = {};
          output.meta.page_size = limit;
          count = 0;
          if (skip == null) {
            skip = 0;
          }
          return Model.count(where, function(err, count) {
            var new_skip, next, prev;
            if (err) {
              return respond.bad_request(res, err.message);
            } else {
              output.meta.count = count;
              if (count > limit && count > skip + limit) {
                if (skip != null) {
                  new_skip = skip + limit;
                } else {
                  new_skip = limit;
                }
                next = "" + options.path + "?";
                if (sort) {
                  next += "sort=" + sort + "&";
                }
                next += "skip=" + new_skip + "&limit=" + limit;
              } else {
                next = null;
              }
              output.meta.next = next;
              if ((skip != null) && skip !== 0) {
                if ((skip - limit) < 0) {
                  new_skip = 0;
                } else {
                  new_skip = skip - limit;
                }
                prev = "" + options.path + "?";
                if (sort) {
                  prev += "sort=" + sort + "&";
                }
                prev += "skip=" + new_skip + "&limit=" + limit;
              } else {
                prev = null;
              }
              output.meta.previous = prev;
              output.objects = models;
              return respond.ok(res, output);
            }
          });
        }
      });
    };
  };

}).call(this);
