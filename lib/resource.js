// Generated by CoffeeScript 1.7.1
(function() {
  var Resource, _;

  _ = require('lodash');


  /*
  creates a general resource object for mapping http methods to mongoose model methods
  
  options:
    limit: Integer -- the maximum number of documents to be returned given a `find` call
    refs: Object -- a mapping of model keys to resources for given db refs in the schema
  
  @property options: the options used in configuration
  @property many_path: the routing path for retrieving multiple models
  @property single_path: the routing path for retrieving a single model
  
  @method find_one: finds a document for a given `_id`
  @method find: finds multiple documents, optionally restricts to a query, sort, and pagination
  @method create: creates a new document with a given a payload
  @method update: updates a document matching an `_id` with a given payload
  @method destroy: destroys a document with a given `_id`
  @method make_routes: create a routing map
   */

  Resource = (function() {

    /*
    builds the `resource` object
    
    @param model: an instance of a `mongoose.model`
    @param resource_name: the routing path for the resource
    @param options : [optional] an object of options to be used in configuration
     */
    function Resource(model, resource_name, options) {
      this.model = model;
      this.options = {
        limit: 20,
        refs: null
      };
      this.many_path = "/" + resource_name;
      this.single_path = "/" + resource_name + "/:_id";
      _.merge(this.options, options);
      this.options.path = this.many_path;
    }


    /*
    returns a single document matching the `_id` request parameter
     */

    Resource.prototype.find_one = function() {
      return require('./methods/find_one')(this.model, this.options);
    };


    /*
    returns an array of documents, optionally restricted to a query string
     */

    Resource.prototype.find = function() {
      return require('./methods/find')(this.model, this.options);
    };


    /*
    returns a new document created with the request body
     */

    Resource.prototype.create = function() {
      return require('./methods/create')(this.model, this.options);
    };


    /*
    updates a new document matching the `_id` request parameter with the request body
     */

    Resource.prototype.update = function() {
      return require('./methods/update')(this.model, this.options);
    };


    /*
    destroys a single document matching the `_id` request parameter
     */

    Resource.prototype.destroy = function() {
      return require('./methods/destroy')(this.model);
    };


    /*
    sets paths to method handlers for the application
    
    @param app: the express application in use
     */

    Resource.prototype.make_routes = function(app) {
      app.get(this.single_path, this.find_one());
      app.get(this.many_path, this.find());
      app.post(this.many_path, this.create());
      app.put(this.single_path, this.update());
      return app["delete"](this.single_path, this.destroy());
    };

    return Resource;

  })();

  module.exports = Resource;

}).call(this);
