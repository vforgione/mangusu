{"name":"Mangusu","tagline":"mongoose model resources for the express framework","body":"[![Build Status](https://travis-ci.org/vforgione/mangusu.svg?branch=master)](https://travis-ci.org/vforgione/mangusu)\r\n\r\n## api contents\r\n\r\n\r\n## resource\r\n\r\n`resource` is what this whole thing pushes out - it's a simple means of mapping http verbs to mongoose model methods.\r\n\r\n### constructor\r\n\r\ncreates a new instance of a `resource`\r\n\r\n__parameters__\r\n\r\n* `model` a [mongoose model](http://mongoosejs.com/docs/models.html)\r\n* `resource_name` the canonical path of the resource\r\n* `options` an optional hash of configuration options\r\n\r\n__options__\r\n\r\n* `limit` the page size to be returned from a `.find()` call\r\n    * default is `20`\r\n* `refs` is a hash of model field names and their related resources\r\n    * defaults to `null`\r\n\r\n__examples__\r\n\r\n```\r\nExampleSchema = new mongoose.Schema({ name: String });\r\nExampleModel = mongoose.model('ExampleModel', ExampleSchema);\r\n\r\n/* \r\n * simple use:\r\n * creates a resource for a given ExampleModel\r\n *\r\n * -----------------------------------------------------------------\r\n * NOTE: do not instantiate the model - just use the functional type\r\n * -----------------------------------------------------------------\r\n */\r\n\r\nExampleResource = new Resource(ExampleModel, 'example-models');\r\n\r\n\r\n/*\r\n * simple with custom page sizes:\r\n * same as the other, except this will now default to pages of 5\r\n */\r\n\r\nExampleResource = new Resource(ExampleModel, 'example-models', { limit: 5 });\r\n\r\n/*\r\n * slightly more involved example:\r\n * sets references\r\n */\r\n\r\nCliqueSchema = new mongoose.Schema({ name: String });\r\nClique = mongoose.model('Clique', CliqueSchema);\r\n\r\nPersonSchema = new mongoose.Schema({ name: String, clique: { type: ObjectId, ref: Clique } });\r\nPerson = mongoose.model('Person', PersonSchema);\r\n\r\nCliqueResource = new Resource(Clique, 'cliques');\r\nPersonResource = new Resource(Person, 'people', { refs: { clique: CliqueResource } });\r\n```\r\n\r\n### .make_routes()\r\n\r\nshortcuts having to write out paths for the app.\r\n\r\n__parameters__\r\n\r\n* `app` the express application you're working on\r\n\r\n__how it maps__\r\n\r\nthe mapping is pretty straight-forward: it uses the `resource_name` parameter from the constructor to make two routes: `many_path` and `single_path`.\r\n\r\n`many_path` simply prepends the `resource_name` with a slash: i.e. our previous people example, would be reached at `/people`.\r\n\r\n`single_path` appends the express param variable format for the document's `_id` field to the `many_path` -- `/people/:_id`.\r\n\r\na full detail is as follows (for a given `people` resource path):\r\n\r\n| verb | route | method |\r\n| ---- | ----- | ------ |\r\n| GET    | `/people`      | find() |\r\n| GET    | `/people/:_id` | find_one() |\r\n| POST   | `/people`      | create() |\r\n| PUT    | `/people/:_id` | update() |\r\n| DELETE | `/people/:_id` | destroy() |\r\n\r\n__example__\r\n\r\n```\r\n/* shortcuts the following:\r\n *\r\n * app.get('/people', ExampleResource.find());\r\n * app.get('/people/:_id', ExampleResource.find_one());\r\n * app.post('/people', ExampleResource.create());\r\n * app.put('/people/:_id', ExampleResource.update());\r\n * app.delete('/people/:_id', ExampleResource.destroy());\r\n *\r\n * nothing huge, but it saves the tedium\r\n */\r\nvar app = express();\r\n\r\n// app code and stuff\r\n\r\nExampleSchema = new mongoose.Schema({ name: String });\r\nExampleModel = mongoose.model('ExampleModel', ExampleSchema);\r\nExampleResource = new Resource(ExampleModel, 'example-models');\r\n\r\nExampleResource.make_paths(app);\r\n```\r\n\r\n### properties\r\n\r\nthe following properties are given for the `resource`\r\n\r\n* `single_path` : the routing path for retrieving a single document\r\n* `many_path` : the routing path for retrieving multiple documents\r\n* `options` : the options used in configuration\r\n\r\n__many_path__ is constructed from the `resource_name` constructor parameter -- it is simply that value prepended with a slash.\r\n\r\n__single_path__ is constructed from the `many_path` -- it appends `/:_id` to the path to set the `_id` field of the document as the key for finding one document.\r\n\r\n__options__ were explained pretty well in the constructor section.\r\n\r\n\r\n## methods\r\n\r\nif you haven't read the stuff about route mapping (via the `make_routes` function), i would suggest you do that now.\r\n\r\nanywho, the method calls are pretty standard in most respects. i say most because this is where i sugared the project.\r\n\r\n### sugar!\r\n\r\nit's the little things that count.\r\n\r\n__refs__\r\n\r\nthe sugar has been lightly covered before with the `refs` option that can be passed. \r\n\r\ngranted, mongodb doesn't have relations, but you can set up references to other docs using the `{ type: ObjectId, ref: your_model_here }` routine. that's cool and all, but a standard retrieval doesn't give you a resource pointer. sure, you can populate, but that's not very _resty_ of you.\r\n\r\nmy solution is to generate those resource pointers; that is, if you supply the `refs`.\r\n\r\nif you take the above example using people and what clique they're in, the methods will return something like this:\r\n\r\n```\r\n{\r\n  name: \"Col. Bud Manstrong\",\r\n  clique: \"/cliques/<some clique's _id>\",\r\n  _id: <bud's _id>\r\n}\r\n```\r\n\r\nagain, this isn't something huge and mind-blowing, it's just there to make your front-end a little easier to maintain.\r\n\r\n__self uri__\r\n\r\nif you call the `find()` method, you'd get back a list of documents, each containing their own `_id` fields. cool, totally parseable. \r\n\r\nwhat would be cooler would be to slap that to the end of the resource name and make it another field called `resource_uri`.\r\n\r\nlet's recycle that clique example again...\r\n\r\n```\r\n{\r\n  name: \"Col. Bud Manstrong\",\r\n  clique: \"/cliques/<some clique's _id>\",\r\n  _id: <bud's _id>,\r\n  resource_uri: \"/people/<bud's _id>\"\r\n}\r\n```\r\n\r\nnot really helpful in `find_one`, `update` and `destroy` (because you obviously already have that id), but when getting a list stuff, it could be pretty useful.\r\n\r\n__meta__\r\n\r\ni've also added meta data to the `find()` method on top to the `resource_uri`. it makes more sense if you read it in the method's docs.\r\n\r\n\r\n### find()\r\n\r\nreturns a list of documents.\r\n\r\n__options via query string__\r\n\r\nyou can do some cool stuff here using the query string. here's some basics:\r\n\r\n* `limit` sets the number of docs returned. remember, this defaults to 20\r\n* `skip` helps you paginate the results in conjunction with limits\r\n* `sort` like a fucking boss, ascending or descending\r\n\r\n__examples__\r\n\r\n| url | what to expect |\r\n| --- | -------------- |\r\n| `/people?sort=-age` | a list of people in descending order by their age |\r\n| `/people?skip=10&limit=10` | page 2 of a list of people in groups of 10 |\r\n| `/people?skip=10&limit=10&sort=age` | page 2 of a list of people in groups of 10 sorted ascending by age |\r\n\r\n__more options via query string__\r\n\r\nthere's more? you're god damned right!\r\n\r\ni failed to include examples about querying by document keys. you already knew you could do that. but i also hacked in the ability to query keys using native mongodb projections!\r\n\r\n__examples__\r\n\r\n| url | what to expect |\r\n| --- | -------------- |\r\n| `/people?age={\"$gte\":18,\"$lte\":35}` | a list of documents matching an age range of 18 to 35 |\r\n| `/people?name={\"$in\":[\"hank\",\"dean\"]}&clone=true` | a list of documents whose names are hank or dean and are clones |\r\n\r\n__even more!__\r\n\r\nmoar!? yep. \r\n\r\nremember when i said find returns a lit of documents? well, that's not all. it also returns a decent amount of meta information about your query as well.\r\n\r\nhere's an example of what gets kicked out:\r\n\r\n```\r\n# /people?age={\"$gte\":18,\"$lte\":35}&gender=male\r\n\r\n{\r\n  meta: {\r\n    page_size: 20,\r\n    count: 142,\r\n    next: \"/people?age={\"$gte\":18,\"$lte\":35}&gender=male&limit=20&skip=20\",\r\n    previous: null\r\n  },\r\n  objects: [\r\n      { name: \"Some Dude\", age: 28, gender: \"male\", _id: \"<dude's _id>\", resource_uri: \"/people/<dude's _id>\" },\r\n      // and 19 others just like him\r\n  ]\r\n}\r\n\r\n\r\n# so then we call the `next` query: /people?age={\"$gte\":18,\"$lte\":35}&gender=male&limit=20&skip=20\r\n{\r\n  meta: {\r\n    page_size: 20,\r\n    count: 142,\r\n    next: \"/people?age={\"$gte\":18,\"$lte\":35}&gender=male&limit=20&skip=40\",\r\n    previous: \"/people?age={\"$gte\":18,\"$lte\":35}&gender=male&limit=20&skip=0\"\r\n  },\r\n  objects: [\r\n      { name: \"Some Other Dude\", age: 23, gender: \"male\", _id: \"<other dude's _id>\", resource_uri: \"/people/<other dude's _id>\" },\r\n      // and 19 others just like him\r\n  ]\r\n}\r\n```\r\n\r\nyou get a page size (limit, really), the total count of documents matching your query, and uri's for the previous and next pages.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}