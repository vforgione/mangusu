{"name":"Mangusu","tagline":"mongoose model resources for the express framework","body":"[![Build Status](https://travis-ci.org/vforgione/mangusu.svg?branch=master)](https://travis-ci.org/vforgione/mangusu)\r\n\r\n## api contents\r\n\r\n* auto-gen TOC:\r\n{:toc}\r\n\r\n\r\n## resource\r\n\r\n`resource` is what this whole thing pushes out - it's a simple means of mapping http verbs to mongoose model methods.\r\n\r\n### constructor\r\n\r\ncreates a new instance of a `resource`\r\n\r\n__parameters__\r\n\r\n* `model` a [mongoose model](http://mongoosejs.com/docs/models.html)\r\n* `resource_name` the canonical path of the resource\r\n* `options` an optional hash of configuration options\r\n\r\n__options__\r\n\r\n* `limit` the page size to be returned from a `.find()` call\r\n    * default is `20`\r\n* `refs` is a hash of model field names and their related resources\r\n    * defaults to `null`\r\n\r\n__examples__\r\n\r\n```\r\nExampleSchema = new mongoose.Schema({ name: String });\r\nExampleModel = mongoose.model('ExampleModel', ExampleSchema);\r\n\r\n/* \r\n * simple use:\r\n * creates a resource for a given ExampleModel\r\n *\r\n * -----------------------------------------------------------------\r\n * NOTE: do not instantiate the model - just use the functional type\r\n * -----------------------------------------------------------------\r\n */\r\n\r\nExampleResource = new Resource(ExampleModel, 'example-models');\r\n\r\n\r\n/*\r\n * simple with custom page sizes:\r\n * same as the other, except this will now default to pages of 5\r\n */\r\n\r\nExampleResource = new Resource(ExampleModel, 'example-models', { limit: 5 });\r\n\r\n/*\r\n * slightly more involved example:\r\n * sets references\r\n */\r\n\r\nCliqueSchema = new mongoose.Schema({ name: String });\r\nClique = mongoose.model('Clique', CliqueSchema);\r\n\r\nPersonSchema = new mongoose.Schema({ name: String, clique: { type: ObjectId, ref: Clique } });\r\nPerson = mongoose.model('Person', PersonSchema);\r\n\r\nCliqueResource = new Resource(Clique, 'cliques');\r\nPersonResource = new Resource(Person, 'people', { refs: { clique: CliqueResource } });\r\n```\r\n\r\n### .make_routes()\r\n\r\nshortcuts having to write out paths for the app.\r\n\r\n__parameters__\r\n\r\n* `app` the express application you're working on\r\n\r\n__how it maps__\r\n\r\nthe mapping is pretty straight-forward: it uses the `resource_name` parameter from the constructor to make two routes: `many_path` and `single_path`.\r\n\r\n`many_path` simply prepends the `resource_name` with a slash: i.e. our previous people example, would be reached at `/people`.\r\n\r\n`single_path` appends the express param variable format for the document's `_id` field to the `many_path` -- `/people/:_id`.\r\n\r\na full detail is as follows (for a given `people` resource path):\r\n\r\n| verb | route | method |\r\n| ---- | ----- | ------ |\r\n| GET    | `/people`      | find() |\r\n| GET    | `/people/:_id` | find_one() |\r\n| POST   | `/people`      | create() |\r\n| PUT    | `/people/:_id` | update() |\r\n| DELETE | `/people/:_id` | destroy() |\r\n\r\n__example__\r\n\r\n```\r\n/* shortcuts the following:\r\n *\r\n * app.get('/people', ExampleResource.find());\r\n * app.get('/people/:_id', ExampleResource.find_one());\r\n * app.post('/people', ExampleResource.create());\r\n * app.put('/people/:_id', ExampleResource.update());\r\n * app.delete('/people/:_id', ExampleResource.destroy());\r\n *\r\n * nothing huge, but it saves the tedium\r\n */\r\nvar app = express();\r\n\r\n// app code and stuff\r\n\r\nExampleSchema = new mongoose.Schema({ name: String });\r\nExampleModel = mongoose.model('ExampleModel', ExampleSchema);\r\nExampleResource = new Resource(ExampleModel, 'example-models');\r\n\r\nExampleResource.make_paths(app);\r\n```\r\n\r\n### properties\r\n\r\nthe following properties are given for the `resource`\r\n\r\n* `single_path` : the routing path for retrieving a single document\r\n* `many_path` : the routing path for retrieving multiple documents\r\n* `options` : the options used in configuration\r\n\r\n__many_path__ is constructed from the `resource_name` constructor parameter -- it is simply that value prepended with a slash.\r\n\r\n__single_path__ is constructed from the `many_path` -- it appends `/:_id` to the path to set the `_id` field of the document as the key for finding one document.\r\n\r\n__options__ were explained pretty well in the constructor section.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}